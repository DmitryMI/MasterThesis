#!/bin/bash

if [ -z "$RUNSIM_SETVARS_GUARD" ]
then
    source "./setvars.sh"
    if [ $? != 0 ]
    then
        echo "Failed to read setvars.sh"
        exit 1
    fi
else
    echo "RUNSIM_SETVARS_GUARD already set to $RUNSIM_SETVARS_GUARD"
fi

source "../hpc/setvars.sh"

echo "Building project..."
WORKING_DIR=$(pwd)
source ./_build-sim.sh
if [ $? != 0 ]
then
    echo "Building failed!"
    exit $?
fi

echo "Building finished!"

RUNFILE_GEN_SCRIPT="$INSTALLATION_DIR_RUNMAKER/veins_scripts/running/generateRunsFile.pl"
SIMULATION_DIR=$(realpath "../drones_veins_project/drones_veins_project/simulation/drones_veins_project")
PROJECT_EXECUTRABLE_REL="drones_veins_project/drones_veins_project/bin/drones_veins_project_run"
PROJECT_EXECUTABLE=$(realpath "../$PROJECT_EXECUTRABLE_REL")
RUNFILE="$(realpath ./runfile.txt)"
RUNCOUNTER=0

echo "Generating runfile..."
echo "" > $RUNFILE

if [ -z "$SINGULARITY_WORKSPACE_MNT" ]
then
    echo "SINGULARITY_WORKSPACE_MNT not defined!"
    exit 1
fi

LINE_TEMPLATE=". $SINGULARITY_WORKSPACE_MNT/MasterThesis/$PROJECT_EXECUTRABLE_REL -u Cmdenv -c %s -r %s"

input=$(realpath "opp-configs.txt")
cd $SIMULATION_DIR
while IFS= read -r opp_config
do
    echo "Config: $opp_config"
    runnumbers=$($PROJECT_EXECUTABLE -c $opp_config -s -q runnumbers)
    # echo $runnumbers
    if [ $? != 0 ]
    then
        echo "Failed to request runnumbers!"
        exit
    fi
    
    for runnumber in $runnumbers
    do
        runline=$(printf "$LINE_TEMPLATE" $opp_config $runnumber)
        # echo "Runline: $runline"
        echo $runline >> $RUNFILE
        RUNCOUNTER=$((RUNCOUNTER + 1))
    done  
       
done < "$input"

echo "Total $RUNCOUNTER runs."

if [ $RUNCOUNTER == 0 ]
then
    echo "No runs generated! Nothing to schedule."
    exit
fi

echo "Generated $RUNFILE:"
tail $RUNFILE -v -n 5

cd $WORKING_DIR

cd ../hpc/

echo "Generating run.jobfile..."
echo "#!/bin/bash" > ./run.jobfile.vars
echo "# AUTOGENERATED FILE! DO NOT EDIT!" >> ./run.jobfile.vars
CPUS_PER_TASK=8
NTASKS=0

(( NTASKS = (RUNCOUNTER + CPUS_PER_TASK - 1) / CPUS_PER_TASK ))
echo "NTASKS=$NTASKS" >> ./run.jobfile.vars
echo "CPUS_PER_TASK=$CPUS_PER_TASK" >> ./run.jobfile.vars
echo "RUNCOUNTER=$RUNCOUNTER" >> ./run.jobfile.vars

./generate_run_jobfile.sh

echo "Uploading runfile.txt to BeeGFS..."

./upload_file.sh ../stats/runfile.txt "$BEEGFS_WORKSPACE"
if [ $? != 0 ]
then
    echo "Failed to upload runfile!"
    exit 1
fi

echo "Scheduling run job..."
./schedule_jobfile.sh run.jobfile
if [ $? != 0 ]
then
    echo "Failed to schedule the job!"
    exit 1
fi

echo "Job scheduled!"
cd $WORKING_DIR
