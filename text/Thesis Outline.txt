+ Introduction
	+ Global goal: cooperative autonomous vehicles
	+ Problem: obstacles in cities block radio
	+ I will check if there is any benifit in connecting drone-net and vehicle-net
		regarding assistance in urban traffic
	+ Strategy: real-life experiment too expensive
		~ Use software-simulation
	
~ Fundamentals
	+ Ad-hoc networks
		~ VANETs and Drone-nets
	> Related work: another examples of merging VANETs and DroneNETs
		> Examples of network configurations
	+ Challenge: broadcast storm
	+ Broadcast-storm suppression techiques in literature
	+ Why I will use weighted-p-persistence (because it is enough in my setup)
	+ Simulation software:
		+ What is a discrete-event simulator
		+ Brief list of software solutions: ns-3, OMNeT++
	+ Veins: my solution is based on it
		+ Brief description, picture from Veins' web-site
		+ OpenSceneGraph for 3D visualization 
		+ Veins' native road visualizer
		+ Veins Scenario
		+ Veins Car structure (UML)
		> Veins 2D simple shadowing
	+ Simulated hardware:
		+ PHY: Wi-Fi, brief description
		+ MAC: implemented by Veins
		+ Wave short message protocol: implemented by Veins
		
> Implementation
	+ DroneScenario scheme
	+ Veins does not support drones. Implementing drones for Veins
		+ Drones are implemented as a OMNeT++ module.
		+ Scheme of drone-module (layers, app, rebroadcaster, etc.)
		+ Drone Manager and Drone Mobility
	+ Car module: enhancements
		> Scheme of Car3d (derived from Veins, however, there are differences)
	+ BaseApplicationLayer: base class for CarAppl and DroneAppl
	> Veins does not support 3D building and shadowing
		> All buildings can be approximated as right prisms
		> Implementing 3D obstacles		
		> Implementing line-prism intersection algorithm
		> Extending Veins' simple shadowing to support 3D obstacles
		> Debugging: debug lines and intersection points
	> Implementing 3D visualization for debugging
		> OpenSceneGraph brief description (Fundamentals?)
		> Compile-time configuration
		> Veins' native road visualizer (Fundamentals?)
		> 
	> Protocol
		> WSM-based CarJammingAnnouncement
	> Broadcasting and suppressing Broadcast-storm
		> RebroadcastDecider - OMNeT++ layer for abstact rebroadcast decision making
		> Simple implementation: 1-persistence

> Evaluation
	> Manhatten Grid
		> Dimensions, street length, building sizes
		> Comparison to the real Manhatten
	> Input parameters
		> Number of drones (drone density)
		> Number of vehicles (vehicle density)
		> Breakdown probability
	> Output values:
		> From proposal: Average vehicle speed
		> From proposal: Time of a vehicle being stuck in a jam
		> From proposal: Channel busy time ratio
		> From proposal: End-to-end latency of broadcasts
		> New: received announcements ratio
	> Results, graphs, discussion.
		
	
> Conclusion
	> "Drones definitely help"
	> Future work:
		> Test different broadcast-suppression techniques
		> Test another map
		> Test other flight heights
		
		
> Add Software versions
> Maybe remove fields from UMLS
> Maybe change UMLs to "inclusion diagram"
> "This section is based on [3]"
> Redraw not my own pictures
> Add hop counter

https://inkscape.org/?switchlang=en
https://www.overleaf.com/learn/latex/LaTeX_Graphics_using_TikZ%3A_A_Tutorial_for_Beginners_(Part_3)%E2%80%94Creating_Flowcharts
https://www.overleaf.com/learn/latex/LaTeX_Graphics_using_TikZ%3A_A_Tutorial_for_Beginners_(Part_1)%E2%80%94Basic_Drawing